@page "/ConfigBot"
@using RSV_dashboard.Bot.Components;
@using RSV_dashboard.Bot.Models.Tasks;

<style>
    .margin-top-standard {
        margin-top: 5px;
    }

    .margin-all {
        margin: 10px 10px 10px 10px;
    }
</style>

<MudText Typo="Typo.h2">@config.BotName</MudText>
<MudText Typo="Typo.h5">В настоящее время имеется @config.Conversations.Where(f => f.IsFAQ()).Count() конструкций вопрос-ответов</MudText>
<!--<MudText Typo="Typo.h5">There are currently There are currently @config.Conversations.Where(f => !f.IsFAQ()).Count() configured Custom Conversations.</MudText>-->
<br />

<MudPaper Width="100%" Square="true" Class="">
    <MudText Typo="Typo.h5">Имя бота</MudText>
    <MudTextField @bind-Value="@config.BotName" Label="Введите имя" Variant="Variant.Outlined"></MudTextField>
</MudPaper>
<MudPaper Width="100%" Square="true" Class="">
    <MudText Typo="Typo.h5">Приветственная фраза</MudText>
    <MudTextField @bind-Value="@config.BotGreeting" Label="Введите фразу" Variant="Variant.Outlined" Lines="2"></MudTextField>
</MudPaper>
<MudPaper Width="100%" Square="true" Class="">
    <MudText Typo="Typo.h5">Расположение модели</MudText>
    <MudTextField @bind-Value="@config.ModelFile" Label="Укажите расположение модели" Variant="Variant.Outlined"></MudTextField>
</MudPaper>
<hr />


<MudButton @onclick="ShowFAQ" Variant="Variant.Filled" Color="Color.Primary">@showFAQLabel</MudButton>
<MudButton @onclick="SaveConfig" Variant="Variant.Filled" Color="Color.Primary">Сохранить</MudButton>
<MudButton @onclick="TrainModel" Variant="Variant.Filled" Color="Color.Primary">Тренировать</MudButton>
<MudButton @onclick="TestChat" Variant="Variant.Filled" Color="Color.Primary">Тест</MudButton>

@if (testChat)
{
    <TestChat botConfig="config" />
}

@if (showFAQ)
{
    @if ((Conversations = config.Conversations.Where(f => f.IsFAQ())) != null)
    {

<MudTable Items="@Conversations" Hover="true">
    <ColGroup>
        <col style="width: 33%;" />
        <col style="width: 34%;" />
        <col style="width: 33%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh>Название конструкции</MudTh>
        <MudTh>Когда ему говорят</MudTh>
        <MudTh>Оно отвечает</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Название конструкции">

            <MudPaper Class="d-flex flex-row">
                <MudTextField @bind-Value="@context.Name" Label="Введите название конструкции" Variant="Variant.Text"></MudTextField>
                <MudIconButton @onclick="() => DeleteFAQ(context.ID)" Icon="@Icons.Material.Filled.Delete" Size="Size.Small"></MudIconButton>
            </MudPaper>
            <MudPaper Class="d-flex flex-row">

            </MudPaper>

            @if (context.StartNode.Synonyms.Count > 0)
                    {
                <MudText Typo="Typo.h6">Синонимы</MudText>

                @foreach (var synonym in context.StartNode.Synonyms)
                        {
                    <MudPaper Class="d-flex flex-row">
                        <MudTextField @bind-Value="@synonym.FAQWord" Label="Введите название конструкции" Variant="Variant.Outlined"></MudTextField>
                        <MudText Typo="Typo.caption">cин-им</MudText>
                        <MudTextField @bind-Value="@synonym.SynonymWord" Label="Введите название конструкции" Variant="Variant.Outlined"></MudTextField>
                        <MudIconButton @onclick="() => DeleteSynonym(context.ID, synonym.ID)" Icon="@Icons.Material.Filled.Delete" Size="Size.Small"></MudIconButton>
                    </MudPaper>
                        }
                    }
            <MudButton @onclick="() => AddSynonym(context.ID)" Variant="Variant.Filled" Color="Color.Warning">+ Синоним</MudButton>
        </MudTd>

        <MudTd DataLabel="Когда ему говорят">
            @foreach (var utterance in context.StartNode.Utterances)
                    {
                <MudPaper Class="d-flex flex-row">
                    <MudTextField @bind-Value="@utterance.Statement" Label="Введите запрос" Variant="Variant.Outlined"></MudTextField>
                    <MudIconButton @onclick="() => DeleteUtterance(context.ID, utterance.ID)" Icon="@Icons.Material.Filled.Delete" Size="Size.Small"></MudIconButton>
                </MudPaper>
                    }
            <MudButton @onclick="() => AddUtterance(context.ID)" Variant="Variant.Filled" Color="Color.Warning">+ запрос</MudButton>
        </MudTd>
        <MudTd DataLabel="Оно отвечает">
            @foreach (var response in context.ReplyNode.Responses)
                    {
                <MudPaper Class="d-flex flex-row">
                    <MudTextField @bind-Value="@response.Statement" Label="Введите ответ" Variant="Variant.Outlined" Lines="5"></MudTextField>
                    <MudIconButton @onclick="() => DeleteResponse(context.ID, response.ID)" Icon="@Icons.Material.Filled.Delete" Size="Size.Small"></MudIconButton>
                </MudPaper>
                    }
            <MudButton @onclick="() => AddResponse(context.ID)" Variant="Variant.Filled" Color="Color.Warning">+ ответ</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

    }

    <MudButton @onclick="AddFAQ" Variant="Variant.Filled" Color="Color.Warning">+ Конструкция</MudButton>

}

<MudMessageBox @ref="mbox" Title="Успешно">
    <MessageContent>
        Сохранено!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.DeleteForever">Ok</MudButton>
    </YesButton>
</MudMessageBox>






@code {
    private bool showFAQ { get; set; } = false;
    private bool testChat { get; set; } = false;
    private string showFAQLabel { get; set; } = "Отобразить редактор";
    string fileName { get; set; } = "Bot//TestingBots//Configs//rsvBot.json";
    Bot.Models.BotConfig config { get; set; }

    MudMessageBox mbox { get; set; }
    private string tempTextfield;
    private IEnumerable<Conversation> Conversations = new List<Conversation>();

    private async void OnButtonClicked()
    {
        bool? result = await mbox.Show();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {

        var text = System.IO.File.ReadAllText(fileName);
        Newtonsoft.Json.JsonSerializerSettings settings = new Newtonsoft.Json.JsonSerializerSettings()
        {
            TypeNameHandling = Newtonsoft.Json.TypeNameHandling.Auto

        };


        config = Newtonsoft.Json.JsonConvert.DeserializeObject<Bot.Models.BotConfig>(text, settings);

    }
    private void ShowFAQ()
    {
        showFAQ = !showFAQ;

        if (showFAQ)
        {
            showFAQLabel = "Скрыть редактор";
        }
        else
        {
            showFAQLabel = "Показать редактор";
        }
    }

    private void AddFAQ()
    {
        var newFAQ = new Bot.Models.Tasks.Conversation();
        newFAQ.Name = $"newFAQ{DateTime.Now.ToString("MMddyy.hhmmss")}";
        newFAQ.AddUtterance("");
        newFAQ.AddResponse("");
        config.Conversations.Add(newFAQ);
    }

    private void DeleteFAQ(Guid faqId)
    {
        config.Conversations.RemoveAll(f => f.ID == faqId);
    }

    private void DeleteUtterance(Guid faqId, Guid utteranceID)
    {
        var faq = config.Conversations.Where(f => f.ID == faqId).FirstOrDefault();
        faq.StartNode.Utterances.RemoveAll(f => f.ID == utteranceID);
    }

    private void DeleteResponse(Guid faqId, Guid responseID)
    {
        var faq = config.Conversations.Where(f => f.ID == faqId).FirstOrDefault();
        faq.ReplyNode.Responses.RemoveAll(f => f.ID == responseID);
    }

    private void AddUtterance(Guid faqId)
    {
        var faq = config.Conversations.Where(f => f.ID == faqId).FirstOrDefault();
        faq.AddUtterance("");
    }
    private void AddSynonym(Guid faqId)
    {
        var faq = config.Conversations.Where(f => f.ID == faqId).FirstOrDefault();
        faq.AddSynonym("", "");
    }
    private void DeleteSynonym(Guid faqId, Guid synonymID)
    {
        var faq = config.Conversations.Where(f => f.ID == faqId).FirstOrDefault();
        faq.StartNode.Synonyms.RemoveAll(f => f.ID == synonymID);
    }
    private void AddResponse(Guid faqId)
    {
        var faq = config.Conversations.Where(f => f.ID == faqId).FirstOrDefault();
        faq.AddResponse("");
    }

    private void SaveConfig()
    {
        config.Save();
        //Modal.Show("Saved!", typeof(Bot.Components.Modals.SaveComplete));
        OnButtonClicked();
    }

    private void TrainModel()
    {
        var trainingResult = Bot.Services.Platform.AIService.Train(config);
        config.ModelFile = trainingResult;
        config.Save();
        //Modal.Show("Great News!", typeof(Bot.Components.Modals.TrainingComplete));
        OnButtonClicked();
    }

    private void TestChat()
    {
        testChat = !testChat;
    }


}

